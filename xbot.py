import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import json
import os

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8132157647:AAEKgebdk_Q86DZdbPFncwYqhj7YHmrKj20"

# üìÇ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# üìå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"admins": [], "pairs": {}, "exchange_requests": []}

# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
data = load_data()

# üè¶ –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
ADMIN_IDS = data["admins"]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
PAIRS = data["pairs"]  # –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
exchange_requests = data["exchange_requests"]  # –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω
user_data = {}
orders = {"exchange": [], "cash_out": []}
user_data = {}
# ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(is_admin=False):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üí± –û–±–º–µ–Ω"), KeyboardButton("üíµ –î–æ–ø.–£—Å–ª—É–≥–∏"))

    if is_admin:
        markup.add(KeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    return markup

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_command(message):
    is_admin = message.chat.id in ADMIN_IDS
    bot.send_message(
        message.chat.id, 
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=main_menu(is_admin)
    )


@bot.message_handler(func=lambda message: message.text == "üí± –û–±–º–µ–Ω")
def exchange_currency(message):
    user_data[message.chat.id] = {"state": "exchange"}
    
    if not PAIRS:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –Ω–µ—Ç.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for pair in PAIRS.keys():
        markup.add(KeyboardButton(pair))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in PAIRS)
def select_currency_pair(message):
    if user_data.get(message.chat.id, {}).get("state") != "exchange":
        return
    
    pair = message.text
    user_data[message.chat.id] = {"state": "enter_amount", "pair": pair}
    rate = PAIRS[pair]
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    
    bot.send_message(
        message.chat.id,
        f"üí± –ö—É—Ä—Å {pair}: {rate} USDT\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("state") == "enter_amount")
def enter_amount(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_data.pop(message.chat.id, None)
        bot.send_message(message.chat.id, "‚è™ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=main_menu())
        return
    
    try:
        amount = float(message.text)
        pair = user_data[message.chat.id]["pair"]
        rate = PAIRS[pair]
        total = round(amount * rate, 2)
        
        user_data[message.chat.id].update({"amount": amount, "total": total, "state": "confirm"})
        
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–º–µ–Ω"), KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        
        bot.send_message(
            message.chat.id,
            f"üîÑ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: {total} USDT\n"
            f"üì• –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} {pair.split('/')[0]} –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å:\n\n"
            f"`–í–∞—à_–∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞`",
            parse_mode="Markdown",
            reply_markup=markup
        )
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–º–µ–Ω")
def confirm_exchange(message):
    if user_data.get(message.chat.id, {}).get("state") != "confirm":
        return
    
    bot.send_message(message.chat.id, "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
    user_data[message.chat.id]["state"] = "get_wallet"

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("state") == "get_wallet")
def get_wallet_address(message):
    wallet_address = message.text.strip()
    
    if message.chat.id not in user_data:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω –∑–∞–Ω–æ–≤–æ.")
        return
    
    exchange_info = user_data.pop(message.chat.id)
    
    orders["exchange"].append({
        "user_id": message.chat.id,
        "username": message.from_user.username or f"tg://user?id={message.chat.id}",
        "pair": exchange_info['pair'],
        "amount": exchange_info['amount'],
        "total": exchange_info['total'],
        "wallet": wallet_address
    })
    
    bot.send_message(message.chat.id, "‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.", reply_markup=main_menu())
    
    for admin_id in ADMIN_IDS:
        bot.send_message(
            admin_id,
            f"üì¢ –ù–æ–≤—ã–π –æ–±–º–µ–Ω!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.username or message.chat.id}](tg://user?id={message.chat.id})\n"
            f"üí± –ü–∞—Ä–∞: {exchange_info['pair']}\n"
            f"üí∞ –°—É–º–º–∞: {exchange_info['amount']} {exchange_info['pair'].split('/')[0]}\n"
            f"üíµ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {exchange_info['total']} USDT\n"
            f"üì• –ö–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{wallet_address}`",
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda message: message.text == "üíµ –î–æ–ø.–£—Å–ª—É–≥–∏")
def cash_out(message):
    user_data[message.chat.id] = {"state": "cash_out"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏—è:")

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("state") == "cash_out")
def save_cash_out(message):
    try:
        amount = float(message.text)
        
        orders["cash_out"].append({
            "user_id": message.chat.id,
            "username": message.from_user.username or f"tg://user?id={message.chat.id}",
            "amount": amount
        })
        
        bot.send_message(
            message.chat.id,
            "üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=main_menu()
        )
        
        for admin_id in ADMIN_IDS:
            bot.send_message(
                admin_id,
                f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏–µ!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.username or message.chat.id}](tg://user?id={message.chat.id})\n"
                f"üí∞ –°—É–º–º–∞: {amount} USDT",
                parse_mode="Markdown"
            )
        
        user_data.pop(message.chat.id, None)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        
# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
@bot.message_handler(func=lambda message: message.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", "üìú –°–ø–∏—Å–æ–∫ –ø–∞—Ä",
        "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", "üîô –ù–∞–∑–∞–¥"
    ]
    
    for btn in buttons:
        markup.add(KeyboardButton(btn))

    bot.send_message(message.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# üìå –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    is_admin = message.chat.id in ADMIN_IDS
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu(is_admin))
# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
def add_admin(message):
    user_data[message.chat.id] = {"state": "add_admin"}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(msg, process_add_admin)

def process_add_admin(message):
    if message.chat.id not in user_data or user_data[message.chat.id].get("state") != "add_admin":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    try:
        new_admin_id = int(message.text)
        if new_admin_id in ADMIN_IDS:
            bot.send_message(message.chat.id, "üë§ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            ADMIN_IDS.append(new_admin_id)
            save_data(data)
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
def remove_admin(message):
    user_data[message.chat.id] = {"state": "remove_admin"}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_remove_admin)

def process_remove_admin(message):
    if message.chat.id not in user_data or user_data[message.chat.id].get("state") != "remove_admin":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    try:
        admin_id = int(message.text)
        if admin_id in ADMIN_IDS:
            ADMIN_IDS.remove(admin_id)
            save_data(data)
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª—ë–Ω.")
        else:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É")
def add_pair(message):
    user_data[message.chat.id] = {"state": "add_pair"}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT):")
    bot.register_next_step_handler(msg, process_add_pair)
    
def process_add_pair(message):
    if message.chat.id not in user_data or user_data[message.chat.id].get("state") != "add_pair":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    pair = message.text.strip().upper()
    if pair in PAIRS:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return

    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è {pair}:")
    bot.register_next_step_handler(msg, process_add_pair_rate, pair)

def process_add_pair_rate(message, pair):
    if message.chat.id not in user_data or user_data[message.chat.id].get("state") != "add_pair":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    try:
        rate = float(message.text)
        PAIRS[pair] = rate
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫—É—Ä—Å–æ–º {rate}.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# üìå –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É")
def remove_pair(message):
    user_data[message.chat.id] = {"state": "remove_pair"}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if not PAIRS:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for pair in PAIRS.keys():
        markup.add(KeyboardButton(pair))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_remove_pair)

def process_remove_pair(message):
    if message.chat.id not in user_data or user_data[message.chat.id].get("state") != "remove_pair":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    pair = message.text.strip().upper()
    if pair in PAIRS:
        del PAIRS[pair]
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {pair} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ—Ç.")
# üìå –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
@bot.message_handler(func=lambda message: message.text == "üìú –°–ø–∏—Å–æ–∫ –ø–∞—Ä")
def list_pairs(message):
    if not PAIRS:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –Ω–µ—Ç.")
        return

    pairs_text = "\n".join([f"üí± {pair}: {rate} USDT" for pair, rate in PAIRS.items()])
    bot.send_message(message.chat.id, f"üìú –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:\n{pairs_text}")

# üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
@bot.message_handler(func=lambda message: message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫")
def view_requests(message):
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ orders, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º —Ö—Ä–∞–Ω—è—Ç—Å—è
    exchange_requests = orders.get("exchange", [])
    cashout_requests = orders.get("cash_out", [])

    if not exchange_requests and not cashout_requests:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    if exchange_requests:
        bot.send_message(message.chat.id, "üí± **–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω:**", parse_mode="Markdown")
        for request in exchange_requests:
            text = (
                f"üìå ID: {request.get('id', 'N/A')}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{request.get('username') or request.get('user_id')}\n"
                f"üí± –ü–∞—Ä–∞: {request.get('pair')}\n"
                f"üí∞ –°—É–º–º–∞: {request.get('amount')} {request.get('pair', '').split('/')[0]}\n"
                f"üì• –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{request.get('wallet')}`"
            )
            bot.send_message(message.chat.id, text, parse_mode="Markdown")

    if cashout_requests:
        bot.send_message(message.chat.id, "üíµ **–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–±–Ω–∞–ª:**", parse_mode="Markdown")
        for request in cashout_requests:
            text = (
                f"üìå ID: {request.get('id', 'N/A')}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{request.get('username') or request.get('user_id')}\n"
                f"üíµ –°—É–º–º–∞: {request.get('amount')} USDT"
            )
            bot.send_message(message.chat.id, text, parse_mode="Markdown")
# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda message: message.text.startswith("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"))
def delete_request(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        request_id = int(message.text.split()[-1])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω
        exchange_requests = orders.get("exchange", [])
        exchange_requests = [req for req in exchange_requests if req["id"] != request_id]
        orders["exchange"] = exchange_requests  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏–µ
        cashout_requests = orders.get("cash_out", [])
        cashout_requests = [req for req in cashout_requests if req["id"] != request_id]
        orders["cash_out"] = cashout_requests  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–Ω–∞–ª–∏—á–∏–≤–∞–Ω–∏–µ

        save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞—è–≤–∫–∞ {request_id} —É–¥–∞–ª–µ–Ω–∞.")
    
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ ID.")
# üìå –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    is_admin = message.chat.id in ADMIN_IDS
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu(is_admin))
    
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)